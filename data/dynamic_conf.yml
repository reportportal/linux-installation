http:
  routers:
    ###########################################################
    # Router for the API service
    ###########################################################
    api-router:
      rule: "PathPrefix(`/api`)"    # Requests starting with /api
      entryPoints: ["web"]
      service: "api-service"
      middlewares: ["strip-api"]

    ###########################################################
    # Router for the UI service
    ###########################################################
    ui-router:
      rule: "PathPrefix(`/ui`)"     # Requests starting with /ui
      entryPoints: ["web"]
      service: "ui-service"
      middlewares: ["strip-ui"]

    ###########################################################
    # Router for the index service
    ###########################################################
    index-router:
      # This is effectively a catch-all for any path NOT starting with /api or /ui
      # If you want to keep the old path arrangement (like /), use this rule
      rule: "PathPrefix(`/`)"
      entryPoints: ["web"]
      service: "index-service"
      # no prefix stripping needed, unless you want to remove "/"

  #############################################################
  # Services - point to local ports on the EC2 (127.0.0.1)
  #############################################################
  services:
    api-service:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8585"

    ui-service:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:3000"

    index-service:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:9000"

  #############################################################
  # Middlewares (strip the prefix before passing to the service)
  #############################################################
  middlewares:
    strip-api:
      stripPrefix:
        prefixes:
          - "/api"

    strip-ui:
      stripPrefix:
        prefixes:
          - "/ui"
